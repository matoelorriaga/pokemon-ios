//
//  DetailsInteractorTests.swift
//  pokemon-ios
//
//  Created by MatÃ­as Elorriaga on 8/4/17.
//  Copyright (c) 2017 melorriaga. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import pokemon_ios
import XCTest

class DetailsInteractorTests: XCTestCase {
    
    var sut: DetailsInteractor!
    
    override func setUp() {
        super.setUp()
        setupDetailsInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // setup
    
    func setupDetailsInteractor() {
        sut = DetailsInteractor()
    }
    
    // test doubles
    
    class DetailsStoreProtocolSpy: DetailsStoreProtocol {
        
        var getPokemonDetailsCalled = false
        
        func getPokemonDetails(id: Int, completionHandler: @escaping (Pokemon?) -> Void) {
            getPokemonDetailsCalled = true
            completionHandler(nil)
        }
        
    }
    
    class DetailsWorkerSpy: DetailsWorker {
        
        var getPokemonDetailsCalled = false
        
        override func getPokemonDetails(id: Int, completionHandler: @escaping (Pokemon?) -> Void) {
            getPokemonDetailsCalled = true
            completionHandler(nil)
        }
        
    }
    
    class DetailsInteractorOutputSpy: DetailsInteractorOutput {
        
        var presentGetPokemonDetailsCalled = false
        var response: Details.GetPokemonDetails.Response!
        
        func presentGetPokemonDetails(response: Details.GetPokemonDetails.Response) {
            presentGetPokemonDetailsCalled = true
            self.response = response
        }
        
    }
    
    // tests
    
    func testShouldCallWorkerAndPresenter() {
        // given
        let detailsWorkerSpy = DetailsWorkerSpy(detailsStore: DetailsStoreProtocolSpy())
        sut.worker = detailsWorkerSpy
        let detailsInteractorOutputSpy = DetailsInteractorOutputSpy()
        sut.output = detailsInteractorOutputSpy
        
        // when
        let request = Details.GetPokemonDetails.Request(id: 25)
        sut.doGetPokemonDetails(request: request)
        
        // then
        XCTAssert(detailsWorkerSpy.getPokemonDetailsCalled)
        XCTAssert(detailsInteractorOutputSpy.presentGetPokemonDetailsCalled)
    }
    
}
