//
//  MainInteractorTests.swift
//  pokemon-ios
//
//  Created by MatÃ­as Elorriaga on 8/4/17.
//  Copyright (c) 2017 melorriaga. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import pokemon_ios
import XCTest

class MainInteractorTests: XCTestCase {
    
    var sut: MainInteractor!
    
    override func setUp() {
        super.setUp()
        setupMainInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // setup
    
    func setupMainInteractor() {
        sut = MainInteractor()
    }
    
    // test doubles
    
    class MainStoreProtocolSpy: MainStoreProtocol {
        
        var getPokemonListCalled = false
        
        func getPokemonList(completionHandler: @escaping (APIResourceList?) -> Void) {
            getPokemonListCalled = true
            completionHandler(nil)
        }
        
    }
    
    class MainWorkerSpy: MainWorker {
        
        var getPokemonListCalled = false
        
        override func getPokemonList(completionHandler: @escaping (APIResourceList?) -> Void) {
            getPokemonListCalled = true
            completionHandler(nil)
        }
        
    }
    
    class MainInteractorOutputSpy: MainInteractorOutput {
        
        var presentGetPokemonListCalled = false
        
        func presentGetPokemonList(response: Main.GetPokemonList.Response) {
            presentGetPokemonListCalled = true
        }
        
    }
    
    // tests
    
    func testSutShouldCallWorkerAndPresenter() {
        // given
        let mainWorkerSpy = MainWorkerSpy(mainStore: MainStoreProtocolSpy())
        sut.worker = mainWorkerSpy
        
        let mainInteractorOutputSpy = MainInteractorOutputSpy()
        sut.output = mainInteractorOutputSpy
        
        // when
        let request = Main.GetPokemonList.Request()
        sut.doGetPokemonList(request: request)
        
        // then
        XCTAssert(mainWorkerSpy.getPokemonListCalled)
        XCTAssert(mainInteractorOutputSpy.presentGetPokemonListCalled)
    }
    
}
